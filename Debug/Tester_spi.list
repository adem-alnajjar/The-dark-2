
Tester_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016d4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001880  08001880  00011880  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001890  08001890  00011890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001898  08001898  00011898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800189c  0800189c  0001189c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080018a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00000080  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  2000008c  2000008c  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000795b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001595  00000000  00000000  00027997  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000027c7  00000000  00000000  00028f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000568  00000000  00000000  0002b6f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000758  00000000  00000000  0002bc60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00002b34  00000000  00000000  0002c3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000021cc  00000000  00000000  0002eeec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000310b8  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000e30  00000000  00000000  00031134  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001868 	.word	0x08001868

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08001868 	.word	0x08001868

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b97a 	b.w	80004f8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	468c      	mov	ip, r1
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	9e08      	ldr	r6, [sp, #32]
 8000228:	2b00      	cmp	r3, #0
 800022a:	d151      	bne.n	80002d0 <__udivmoddi4+0xb4>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d96d      	bls.n	800030e <__udivmoddi4+0xf2>
 8000232:	fab2 fe82 	clz	lr, r2
 8000236:	f1be 0f00 	cmp.w	lr, #0
 800023a:	d00b      	beq.n	8000254 <__udivmoddi4+0x38>
 800023c:	f1ce 0c20 	rsb	ip, lr, #32
 8000240:	fa01 f50e 	lsl.w	r5, r1, lr
 8000244:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000248:	fa02 f70e 	lsl.w	r7, r2, lr
 800024c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000250:	fa00 f40e 	lsl.w	r4, r0, lr
 8000254:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000258:	0c25      	lsrs	r5, r4, #16
 800025a:	fbbc f8fa 	udiv	r8, ip, sl
 800025e:	fa1f f987 	uxth.w	r9, r7
 8000262:	fb0a cc18 	mls	ip, sl, r8, ip
 8000266:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800026a:	fb08 f309 	mul.w	r3, r8, r9
 800026e:	42ab      	cmp	r3, r5
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x6c>
 8000272:	19ed      	adds	r5, r5, r7
 8000274:	f108 32ff 	add.w	r2, r8, #4294967295
 8000278:	f080 8123 	bcs.w	80004c2 <__udivmoddi4+0x2a6>
 800027c:	42ab      	cmp	r3, r5
 800027e:	f240 8120 	bls.w	80004c2 <__udivmoddi4+0x2a6>
 8000282:	f1a8 0802 	sub.w	r8, r8, #2
 8000286:	443d      	add	r5, r7
 8000288:	1aed      	subs	r5, r5, r3
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000290:	fb0a 5510 	mls	r5, sl, r0, r5
 8000294:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000298:	fb00 f909 	mul.w	r9, r0, r9
 800029c:	45a1      	cmp	r9, r4
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x98>
 80002a0:	19e4      	adds	r4, r4, r7
 80002a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a6:	f080 810a 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80002aa:	45a1      	cmp	r9, r4
 80002ac:	f240 8107 	bls.w	80004be <__udivmoddi4+0x2a2>
 80002b0:	3802      	subs	r0, #2
 80002b2:	443c      	add	r4, r7
 80002b4:	eba4 0409 	sub.w	r4, r4, r9
 80002b8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002bc:	2100      	movs	r1, #0
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d061      	beq.n	8000386 <__udivmoddi4+0x16a>
 80002c2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002c6:	2300      	movs	r3, #0
 80002c8:	6034      	str	r4, [r6, #0]
 80002ca:	6073      	str	r3, [r6, #4]
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xc8>
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d054      	beq.n	8000382 <__udivmoddi4+0x166>
 80002d8:	2100      	movs	r1, #0
 80002da:	e886 0021 	stmia.w	r6, {r0, r5}
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	f040 808e 	bne.w	800040a <__udivmoddi4+0x1ee>
 80002ee:	42ab      	cmp	r3, r5
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xdc>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80fa 	bhi.w	80004ec <__udivmoddi4+0x2d0>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb65 0503 	sbc.w	r5, r5, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	46ac      	mov	ip, r5
 8000302:	2e00      	cmp	r6, #0
 8000304:	d03f      	beq.n	8000386 <__udivmoddi4+0x16a>
 8000306:	e886 1010 	stmia.w	r6, {r4, ip}
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b912      	cbnz	r2, 8000316 <__udivmoddi4+0xfa>
 8000310:	2701      	movs	r7, #1
 8000312:	fbb7 f7f2 	udiv	r7, r7, r2
 8000316:	fab7 fe87 	clz	lr, r7
 800031a:	f1be 0f00 	cmp.w	lr, #0
 800031e:	d134      	bne.n	800038a <__udivmoddi4+0x16e>
 8000320:	1beb      	subs	r3, r5, r7
 8000322:	0c3a      	lsrs	r2, r7, #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	2101      	movs	r1, #1
 800032a:	fbb3 f8f2 	udiv	r8, r3, r2
 800032e:	0c25      	lsrs	r5, r4, #16
 8000330:	fb02 3318 	mls	r3, r2, r8, r3
 8000334:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000338:	fb0c f308 	mul.w	r3, ip, r8
 800033c:	42ab      	cmp	r3, r5
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x134>
 8000340:	19ed      	adds	r5, r5, r7
 8000342:	f108 30ff 	add.w	r0, r8, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x132>
 8000348:	42ab      	cmp	r3, r5
 800034a:	f200 80d1 	bhi.w	80004f0 <__udivmoddi4+0x2d4>
 800034e:	4680      	mov	r8, r0
 8000350:	1aed      	subs	r5, r5, r3
 8000352:	b2a3      	uxth	r3, r4
 8000354:	fbb5 f0f2 	udiv	r0, r5, r2
 8000358:	fb02 5510 	mls	r5, r2, r0, r5
 800035c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000360:	fb0c fc00 	mul.w	ip, ip, r0
 8000364:	45a4      	cmp	ip, r4
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x15c>
 8000368:	19e4      	adds	r4, r4, r7
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x15a>
 8000370:	45a4      	cmp	ip, r4
 8000372:	f200 80b8 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000376:	4618      	mov	r0, r3
 8000378:	eba4 040c 	sub.w	r4, r4, ip
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	e79d      	b.n	80002be <__udivmoddi4+0xa2>
 8000382:	4631      	mov	r1, r6
 8000384:	4630      	mov	r0, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	f1ce 0420 	rsb	r4, lr, #32
 800038e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000392:	fa07 f70e 	lsl.w	r7, r7, lr
 8000396:	fa20 f804 	lsr.w	r8, r0, r4
 800039a:	0c3a      	lsrs	r2, r7, #16
 800039c:	fa25 f404 	lsr.w	r4, r5, r4
 80003a0:	ea48 0803 	orr.w	r8, r8, r3
 80003a4:	fbb4 f1f2 	udiv	r1, r4, r2
 80003a8:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003ac:	fb02 4411 	mls	r4, r2, r1, r4
 80003b0:	fa1f fc87 	uxth.w	ip, r7
 80003b4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003b8:	fb01 f30c 	mul.w	r3, r1, ip
 80003bc:	42ab      	cmp	r3, r5
 80003be:	fa00 f40e 	lsl.w	r4, r0, lr
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1bc>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ca:	f080 808a 	bcs.w	80004e2 <__udivmoddi4+0x2c6>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	f240 8087 	bls.w	80004e2 <__udivmoddi4+0x2c6>
 80003d4:	3902      	subs	r1, #2
 80003d6:	443d      	add	r5, r7
 80003d8:	1aeb      	subs	r3, r5, r3
 80003da:	fa1f f588 	uxth.w	r5, r8
 80003de:	fbb3 f0f2 	udiv	r0, r3, r2
 80003e2:	fb02 3310 	mls	r3, r2, r0, r3
 80003e6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ea:	fb00 f30c 	mul.w	r3, r0, ip
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1e6>
 80003f2:	19ed      	adds	r5, r5, r7
 80003f4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003f8:	d26f      	bcs.n	80004da <__udivmoddi4+0x2be>
 80003fa:	42ab      	cmp	r3, r5
 80003fc:	d96d      	bls.n	80004da <__udivmoddi4+0x2be>
 80003fe:	3802      	subs	r0, #2
 8000400:	443d      	add	r5, r7
 8000402:	1aeb      	subs	r3, r5, r3
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	e78f      	b.n	800032a <__udivmoddi4+0x10e>
 800040a:	f1c1 0720 	rsb	r7, r1, #32
 800040e:	fa22 f807 	lsr.w	r8, r2, r7
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 f401 	lsl.w	r4, r5, r1
 8000418:	ea48 0303 	orr.w	r3, r8, r3
 800041c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000420:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000424:	40fd      	lsrs	r5, r7
 8000426:	ea4e 0e04 	orr.w	lr, lr, r4
 800042a:	fbb5 f9fc 	udiv	r9, r5, ip
 800042e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000432:	fb0c 5519 	mls	r5, ip, r9, r5
 8000436:	fa1f f883 	uxth.w	r8, r3
 800043a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800043e:	fb09 f408 	mul.w	r4, r9, r8
 8000442:	42ac      	cmp	r4, r5
 8000444:	fa02 f201 	lsl.w	r2, r2, r1
 8000448:	fa00 fa01 	lsl.w	sl, r0, r1
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x244>
 800044e:	18ed      	adds	r5, r5, r3
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d243      	bcs.n	80004de <__udivmoddi4+0x2c2>
 8000456:	42ac      	cmp	r4, r5
 8000458:	d941      	bls.n	80004de <__udivmoddi4+0x2c2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	441d      	add	r5, r3
 8000460:	1b2d      	subs	r5, r5, r4
 8000462:	fa1f fe8e 	uxth.w	lr, lr
 8000466:	fbb5 f0fc 	udiv	r0, r5, ip
 800046a:	fb0c 5510 	mls	r5, ip, r0, r5
 800046e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45a0      	cmp	r8, r4
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x26e>
 800047a:	18e4      	adds	r4, r4, r3
 800047c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000480:	d229      	bcs.n	80004d6 <__udivmoddi4+0x2ba>
 8000482:	45a0      	cmp	r8, r4
 8000484:	d927      	bls.n	80004d6 <__udivmoddi4+0x2ba>
 8000486:	3802      	subs	r0, #2
 8000488:	441c      	add	r4, r3
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba4 0408 	sub.w	r4, r4, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454c      	cmp	r4, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	464d      	mov	r5, r9
 800049c:	d315      	bcc.n	80004ca <__udivmoddi4+0x2ae>
 800049e:	d012      	beq.n	80004c6 <__udivmoddi4+0x2aa>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x29c>
 80004a2:	ebba 030e 	subs.w	r3, sl, lr
 80004a6:	eb64 0405 	sbc.w	r4, r4, r5
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40cb      	lsrs	r3, r1
 80004b0:	431f      	orrs	r7, r3
 80004b2:	40cc      	lsrs	r4, r1
 80004b4:	6037      	str	r7, [r6, #0]
 80004b6:	6074      	str	r4, [r6, #4]
 80004b8:	2100      	movs	r1, #0
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	4618      	mov	r0, r3
 80004c0:	e6f8      	b.n	80002b4 <__udivmoddi4+0x98>
 80004c2:	4690      	mov	r8, r2
 80004c4:	e6e0      	b.n	8000288 <__udivmoddi4+0x6c>
 80004c6:	45c2      	cmp	sl, r8
 80004c8:	d2ea      	bcs.n	80004a0 <__udivmoddi4+0x284>
 80004ca:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ce:	eb69 0503 	sbc.w	r5, r9, r3
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7e4      	b.n	80004a0 <__udivmoddi4+0x284>
 80004d6:	4628      	mov	r0, r5
 80004d8:	e7d7      	b.n	800048a <__udivmoddi4+0x26e>
 80004da:	4640      	mov	r0, r8
 80004dc:	e791      	b.n	8000402 <__udivmoddi4+0x1e6>
 80004de:	4681      	mov	r9, r0
 80004e0:	e7be      	b.n	8000460 <__udivmoddi4+0x244>
 80004e2:	4601      	mov	r1, r0
 80004e4:	e778      	b.n	80003d8 <__udivmoddi4+0x1bc>
 80004e6:	3802      	subs	r0, #2
 80004e8:	443c      	add	r4, r7
 80004ea:	e745      	b.n	8000378 <__udivmoddi4+0x15c>
 80004ec:	4608      	mov	r0, r1
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xe6>
 80004f0:	f1a8 0802 	sub.w	r8, r8, #2
 80004f4:	443d      	add	r5, r7
 80004f6:	e72b      	b.n	8000350 <__udivmoddi4+0x134>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_InitTick+0x3c>)
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <HAL_InitTick+0x40>)
{
 8000502:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000504:	7818      	ldrb	r0, [r3, #0]
 8000506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800050a:	fbb3 f3f0 	udiv	r3, r3, r0
 800050e:	6810      	ldr	r0, [r2, #0]
 8000510:	fbb0 f0f3 	udiv	r0, r0, r3
 8000514:	f000 f8aa 	bl	800066c <HAL_SYSTICK_Config>
 8000518:	4604      	mov	r4, r0
 800051a:	b958      	cbnz	r0, 8000534 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800051c:	2d0f      	cmp	r5, #15
 800051e:	d809      	bhi.n	8000534 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000520:	4602      	mov	r2, r0
 8000522:	4629      	mov	r1, r5
 8000524:	f04f 30ff 	mov.w	r0, #4294967295
 8000528:	f000 f85e 	bl	80005e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <HAL_InitTick+0x44>)
 800052e:	4620      	mov	r0, r4
 8000530:	601d      	str	r5, [r3, #0]
 8000532:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000534:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000536:	bd38      	pop	{r3, r4, r5, pc}
 8000538:	20000008 	.word	0x20000008
 800053c:	20000000 	.word	0x20000000
 8000540:	20000004 	.word	0x20000004

08000544 <HAL_Init>:
{
 8000544:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <HAL_Init+0x30>)
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800054e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000556:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800055e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000560:	2003      	movs	r0, #3
 8000562:	f000 f82f 	bl	80005c4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000566:	2000      	movs	r0, #0
 8000568:	f7ff ffc8 	bl	80004fc <HAL_InitTick>
  HAL_MspInit();
 800056c:	f001 f8b8 	bl	80016e0 <HAL_MspInit>
}
 8000570:	2000      	movs	r0, #0
 8000572:	bd08      	pop	{r3, pc}
 8000574:	40023c00 	.word	0x40023c00

08000578 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000578:	4a03      	ldr	r2, [pc, #12]	; (8000588 <HAL_IncTick+0x10>)
 800057a:	4b04      	ldr	r3, [pc, #16]	; (800058c <HAL_IncTick+0x14>)
 800057c:	6811      	ldr	r1, [r2, #0]
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	440b      	add	r3, r1
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000028 	.word	0x20000028
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000590:	4b01      	ldr	r3, [pc, #4]	; (8000598 <HAL_GetTick+0x8>)
 8000592:	6818      	ldr	r0, [r3, #0]
}
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000028 	.word	0x20000028

0800059c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800059c:	b538      	push	{r3, r4, r5, lr}
 800059e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005a0:	f7ff fff6 	bl	8000590 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005a4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005a6:	bf1c      	itt	ne
 80005a8:	4b05      	ldrne	r3, [pc, #20]	; (80005c0 <HAL_Delay+0x24>)
 80005aa:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005ac:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005ae:	bf18      	it	ne
 80005b0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005b2:	f7ff ffed 	bl	8000590 <HAL_GetTick>
 80005b6:	1b40      	subs	r0, r0, r5
 80005b8:	4284      	cmp	r4, r0
 80005ba:	d8fa      	bhi.n	80005b2 <HAL_Delay+0x16>
  {
  }
}
 80005bc:	bd38      	pop	{r3, r4, r5, pc}
 80005be:	bf00      	nop
 80005c0:	20000000 	.word	0x20000000

080005c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c4:	4a07      	ldr	r2, [pc, #28]	; (80005e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005cc:	041b      	lsls	r3, r3, #16
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d4:	0200      	lsls	r0, r0, #8
 80005d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005de:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005e0:	60d3      	str	r3, [r2, #12]
 80005e2:	4770      	bx	lr
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	68dc      	ldr	r4, [r3, #12]
 80005ee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005f6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f8:	2b04      	cmp	r3, #4
 80005fa:	bf28      	it	cs
 80005fc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000600:	f04f 0501 	mov.w	r5, #1
 8000604:	fa05 f303 	lsl.w	r3, r5, r3
 8000608:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800060c:	bf8c      	ite	hi
 800060e:	3c03      	subhi	r4, #3
 8000610:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000612:	4019      	ands	r1, r3
 8000614:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000616:	fa05 f404 	lsl.w	r4, r5, r4
 800061a:	3c01      	subs	r4, #1
 800061c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800061e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000620:	ea42 0201 	orr.w	r2, r2, r1
 8000624:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000628:	bfad      	iteet	ge
 800062a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062e:	f000 000f 	andlt.w	r0, r0, #15
 8000632:	4b06      	ldrlt	r3, [pc, #24]	; (800064c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000634:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	bfb5      	itete	lt
 800063a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000640:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	bf00      	nop
 8000648:	e000ed00 	.word	0xe000ed00
 800064c:	e000ed14 	.word	0xe000ed14

08000650 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000650:	2800      	cmp	r0, #0
 8000652:	db08      	blt.n	8000666 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000654:	0942      	lsrs	r2, r0, #5
 8000656:	2301      	movs	r3, #1
 8000658:	f000 001f 	and.w	r0, r0, #31
 800065c:	fa03 f000 	lsl.w	r0, r3, r0
 8000660:	4b01      	ldr	r3, [pc, #4]	; (8000668 <HAL_NVIC_EnableIRQ+0x18>)
 8000662:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000666:	4770      	bx	lr
 8000668:	e000e100 	.word	0xe000e100

0800066c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800066c:	3801      	subs	r0, #1
 800066e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000672:	d20a      	bcs.n	800068a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	4a07      	ldr	r2, [pc, #28]	; (8000694 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000678:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067a:	21f0      	movs	r1, #240	; 0xf0
 800067c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000680:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000682:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000684:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800068a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e010 	.word	0xe000e010
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800069c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800069e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a0:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8000868 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006a4:	4a6e      	ldr	r2, [pc, #440]	; (8000860 <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006a6:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800086c <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006aa:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80006ac:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80006ae:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b0:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 80006b2:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006b4:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80006b6:	42ac      	cmp	r4, r5
 80006b8:	f040 80b8 	bne.w	800082c <HAL_GPIO_Init+0x194>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006bc:	684c      	ldr	r4, [r1, #4]
 80006be:	f024 0c10 	bic.w	ip, r4, #16
 80006c2:	f10c 36ff 	add.w	r6, ip, #4294967295
 80006c6:	2e01      	cmp	r6, #1
 80006c8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80006cc:	d812      	bhi.n	80006f4 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 80006ce:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006d0:	2603      	movs	r6, #3
 80006d2:	fa06 f60e 	lsl.w	r6, r6, lr
 80006d6:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006da:	68ce      	ldr	r6, [r1, #12]
 80006dc:	fa06 f60e 	lsl.w	r6, r6, lr
 80006e0:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80006e2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80006e4:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006e6:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006ea:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80006ee:	409e      	lsls	r6, r3
 80006f0:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80006f2:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006f4:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 80006f6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006f8:	fa06 f60e 	lsl.w	r6, r6, lr
 80006fc:	43f6      	mvns	r6, r6
 80006fe:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000702:	688f      	ldr	r7, [r1, #8]
 8000704:	fa07 f70e 	lsl.w	r7, r7, lr
 8000708:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800070c:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000710:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000712:	d116      	bne.n	8000742 <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000714:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000718:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800071c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000720:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000724:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000728:	f04f 0c0f 	mov.w	ip, #15
 800072c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000730:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000734:	690f      	ldr	r7, [r1, #16]
 8000736:	fa07 f70b 	lsl.w	r7, r7, fp
 800073a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 800073e:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000742:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000744:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000746:	f004 0703 	and.w	r7, r4, #3
 800074a:	fa07 fe0e 	lsl.w	lr, r7, lr
 800074e:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000752:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000754:	00e6      	lsls	r6, r4, #3
 8000756:	d569      	bpl.n	800082c <HAL_GPIO_Init+0x194>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000758:	f04f 0b00 	mov.w	fp, #0
 800075c:	f8cd b00c 	str.w	fp, [sp, #12]
 8000760:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000764:	4e3f      	ldr	r6, [pc, #252]	; (8000864 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000766:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800076a:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800076e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000772:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000776:	9703      	str	r7, [sp, #12]
 8000778:	9f03      	ldr	r7, [sp, #12]
 800077a:	f023 0703 	bic.w	r7, r3, #3
 800077e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000782:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000786:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800078a:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800078e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000792:	f04f 0e0f 	mov.w	lr, #15
 8000796:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800079c:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a0:	d04b      	beq.n	800083a <HAL_GPIO_Init+0x1a2>
 80007a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007a6:	42b0      	cmp	r0, r6
 80007a8:	d049      	beq.n	800083e <HAL_GPIO_Init+0x1a6>
 80007aa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007ae:	42b0      	cmp	r0, r6
 80007b0:	d047      	beq.n	8000842 <HAL_GPIO_Init+0x1aa>
 80007b2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007b6:	42b0      	cmp	r0, r6
 80007b8:	d045      	beq.n	8000846 <HAL_GPIO_Init+0x1ae>
 80007ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007be:	42b0      	cmp	r0, r6
 80007c0:	d043      	beq.n	800084a <HAL_GPIO_Init+0x1b2>
 80007c2:	4548      	cmp	r0, r9
 80007c4:	d043      	beq.n	800084e <HAL_GPIO_Init+0x1b6>
 80007c6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80007ca:	42b0      	cmp	r0, r6
 80007cc:	d041      	beq.n	8000852 <HAL_GPIO_Init+0x1ba>
 80007ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007d2:	42b0      	cmp	r0, r6
 80007d4:	d03f      	beq.n	8000856 <HAL_GPIO_Init+0x1be>
 80007d6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007da:	42b0      	cmp	r0, r6
 80007dc:	d03d      	beq.n	800085a <HAL_GPIO_Init+0x1c2>
 80007de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80007e2:	42b0      	cmp	r0, r6
 80007e4:	bf14      	ite	ne
 80007e6:	260a      	movne	r6, #10
 80007e8:	2609      	moveq	r6, #9
 80007ea:	fa06 f60c 	lsl.w	r6, r6, ip
 80007ee:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007f2:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 80007f4:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007f6:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007f8:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80007fc:	bf0c      	ite	eq
 80007fe:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000800:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000802:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000804:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000806:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800080a:	bf0c      	ite	eq
 800080c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800080e:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000810:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000812:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000814:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000818:	bf0c      	ite	eq
 800081a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800081c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 800081e:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000820:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000822:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000824:	bf54      	ite	pl
 8000826:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000828:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 800082a:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800082c:	3301      	adds	r3, #1
 800082e:	2b10      	cmp	r3, #16
 8000830:	f47f af3d 	bne.w	80006ae <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000834:	b005      	add	sp, #20
 8000836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800083a:	465e      	mov	r6, fp
 800083c:	e7d5      	b.n	80007ea <HAL_GPIO_Init+0x152>
 800083e:	2601      	movs	r6, #1
 8000840:	e7d3      	b.n	80007ea <HAL_GPIO_Init+0x152>
 8000842:	2602      	movs	r6, #2
 8000844:	e7d1      	b.n	80007ea <HAL_GPIO_Init+0x152>
 8000846:	2603      	movs	r6, #3
 8000848:	e7cf      	b.n	80007ea <HAL_GPIO_Init+0x152>
 800084a:	2604      	movs	r6, #4
 800084c:	e7cd      	b.n	80007ea <HAL_GPIO_Init+0x152>
 800084e:	2605      	movs	r6, #5
 8000850:	e7cb      	b.n	80007ea <HAL_GPIO_Init+0x152>
 8000852:	2606      	movs	r6, #6
 8000854:	e7c9      	b.n	80007ea <HAL_GPIO_Init+0x152>
 8000856:	2607      	movs	r6, #7
 8000858:	e7c7      	b.n	80007ea <HAL_GPIO_Init+0x152>
 800085a:	2608      	movs	r6, #8
 800085c:	e7c5      	b.n	80007ea <HAL_GPIO_Init+0x152>
 800085e:	bf00      	nop
 8000860:	40013c00 	.word	0x40013c00
 8000864:	40020000 	.word	0x40020000
 8000868:	40023800 	.word	0x40023800
 800086c:	40021400 	.word	0x40021400

08000870 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000870:	b10a      	cbz	r2, 8000876 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000872:	6181      	str	r1, [r0, #24]
 8000874:	4770      	bx	lr
 8000876:	0409      	lsls	r1, r1, #16
 8000878:	e7fb      	b.n	8000872 <HAL_GPIO_WritePin+0x2>

0800087a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800087a:	4770      	bx	lr

0800087c <HAL_GPIO_EXTI_IRQHandler>:
{
 800087c:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800087e:	4b04      	ldr	r3, [pc, #16]	; (8000890 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000880:	6959      	ldr	r1, [r3, #20]
 8000882:	4201      	tst	r1, r0
 8000884:	d002      	beq.n	800088c <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000886:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000888:	f7ff fff7 	bl	800087a <HAL_GPIO_EXTI_Callback>
 800088c:	bd08      	pop	{r3, pc}
 800088e:	bf00      	nop
 8000890:	40013c00 	.word	0x40013c00

08000894 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000894:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	9301      	str	r3, [sp, #4]
 800089a:	4b18      	ldr	r3, [pc, #96]	; (80008fc <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800089c:	4c18      	ldr	r4, [pc, #96]	; (8000900 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008a4:	641a      	str	r2, [r3, #64]	; 0x40
 80008a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ac:	9301      	str	r3, [sp, #4]
 80008ae:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_PWREx_EnableOverDrive+0x70>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80008b6:	f7ff fe6b 	bl	8000590 <HAL_GetTick>
 80008ba:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80008bc:	6863      	ldr	r3, [r4, #4]
 80008be:	03da      	lsls	r2, r3, #15
 80008c0:	d50b      	bpl.n	80008da <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008c4:	4c0e      	ldr	r4, [pc, #56]	; (8000900 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80008c6:	2201      	movs	r2, #1
 80008c8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80008ca:	f7ff fe61 	bl	8000590 <HAL_GetTick>
 80008ce:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80008d0:	6863      	ldr	r3, [r4, #4]
 80008d2:	039b      	lsls	r3, r3, #14
 80008d4:	d50a      	bpl.n	80008ec <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80008d6:	2000      	movs	r0, #0
 80008d8:	e006      	b.n	80008e8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008da:	f7ff fe59 	bl	8000590 <HAL_GetTick>
 80008de:	1b40      	subs	r0, r0, r5
 80008e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008e4:	d9ea      	bls.n	80008bc <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80008e6:	2003      	movs	r0, #3
}
 80008e8:	b003      	add	sp, #12
 80008ea:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80008ec:	f7ff fe50 	bl	8000590 <HAL_GetTick>
 80008f0:	1b40      	subs	r0, r0, r5
 80008f2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80008f6:	d9eb      	bls.n	80008d0 <HAL_PWREx_EnableOverDrive+0x3c>
 80008f8:	e7f5      	b.n	80008e6 <HAL_PWREx_EnableOverDrive+0x52>
 80008fa:	bf00      	nop
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000
 8000904:	420e0040 	.word	0x420e0040
 8000908:	420e0044 	.word	0x420e0044

0800090c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800090c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000910:	4604      	mov	r4, r0
 8000912:	b908      	cbnz	r0, 8000918 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000914:	2001      	movs	r0, #1
 8000916:	e03f      	b.n	8000998 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000918:	6803      	ldr	r3, [r0, #0]
 800091a:	07dd      	lsls	r5, r3, #31
 800091c:	d410      	bmi.n	8000940 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800091e:	6823      	ldr	r3, [r4, #0]
 8000920:	0798      	lsls	r0, r3, #30
 8000922:	d45a      	bmi.n	80009da <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000924:	6823      	ldr	r3, [r4, #0]
 8000926:	071a      	lsls	r2, r3, #28
 8000928:	f100 809c 	bmi.w	8000a64 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800092c:	6823      	ldr	r3, [r4, #0]
 800092e:	075b      	lsls	r3, r3, #29
 8000930:	f100 80ba 	bmi.w	8000aa8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000934:	69a0      	ldr	r0, [r4, #24]
 8000936:	2800      	cmp	r0, #0
 8000938:	f040 811b 	bne.w	8000b72 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800093c:	2000      	movs	r0, #0
 800093e:	e02b      	b.n	8000998 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000940:	4ba4      	ldr	r3, [pc, #656]	; (8000bd4 <HAL_RCC_OscConfig+0x2c8>)
 8000942:	689a      	ldr	r2, [r3, #8]
 8000944:	f002 020c 	and.w	r2, r2, #12
 8000948:	2a04      	cmp	r2, #4
 800094a:	d007      	beq.n	800095c <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000952:	2a08      	cmp	r2, #8
 8000954:	d10a      	bne.n	800096c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	0259      	lsls	r1, r3, #9
 800095a:	d507      	bpl.n	800096c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800095c:	4b9d      	ldr	r3, [pc, #628]	; (8000bd4 <HAL_RCC_OscConfig+0x2c8>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	039a      	lsls	r2, r3, #14
 8000962:	d5dc      	bpl.n	800091e <HAL_RCC_OscConfig+0x12>
 8000964:	6863      	ldr	r3, [r4, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d1d9      	bne.n	800091e <HAL_RCC_OscConfig+0x12>
 800096a:	e7d3      	b.n	8000914 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800096c:	6863      	ldr	r3, [r4, #4]
 800096e:	4d99      	ldr	r5, [pc, #612]	; (8000bd4 <HAL_RCC_OscConfig+0x2c8>)
 8000970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000974:	d113      	bne.n	800099e <HAL_RCC_OscConfig+0x92>
 8000976:	682b      	ldr	r3, [r5, #0]
 8000978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800097c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800097e:	f7ff fe07 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000982:	4d94      	ldr	r5, [pc, #592]	; (8000bd4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000984:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000986:	682b      	ldr	r3, [r5, #0]
 8000988:	039b      	lsls	r3, r3, #14
 800098a:	d4c8      	bmi.n	800091e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800098c:	f7ff fe00 	bl	8000590 <HAL_GetTick>
 8000990:	1b80      	subs	r0, r0, r6
 8000992:	2864      	cmp	r0, #100	; 0x64
 8000994:	d9f7      	bls.n	8000986 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000996:	2003      	movs	r0, #3
}
 8000998:	b002      	add	sp, #8
 800099a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800099e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80009a2:	d104      	bne.n	80009ae <HAL_RCC_OscConfig+0xa2>
 80009a4:	682b      	ldr	r3, [r5, #0]
 80009a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009aa:	602b      	str	r3, [r5, #0]
 80009ac:	e7e3      	b.n	8000976 <HAL_RCC_OscConfig+0x6a>
 80009ae:	682a      	ldr	r2, [r5, #0]
 80009b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80009b4:	602a      	str	r2, [r5, #0]
 80009b6:	682a      	ldr	r2, [r5, #0]
 80009b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80009bc:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d1dd      	bne.n	800097e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 80009c2:	f7ff fde5 	bl	8000590 <HAL_GetTick>
 80009c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80009c8:	682b      	ldr	r3, [r5, #0]
 80009ca:	039f      	lsls	r7, r3, #14
 80009cc:	d5a7      	bpl.n	800091e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009ce:	f7ff fddf 	bl	8000590 <HAL_GetTick>
 80009d2:	1b80      	subs	r0, r0, r6
 80009d4:	2864      	cmp	r0, #100	; 0x64
 80009d6:	d9f7      	bls.n	80009c8 <HAL_RCC_OscConfig+0xbc>
 80009d8:	e7dd      	b.n	8000996 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009da:	4b7e      	ldr	r3, [pc, #504]	; (8000bd4 <HAL_RCC_OscConfig+0x2c8>)
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	f012 0f0c 	tst.w	r2, #12
 80009e2:	d007      	beq.n	80009f4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80009ea:	2a08      	cmp	r2, #8
 80009ec:	d111      	bne.n	8000a12 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	025e      	lsls	r6, r3, #9
 80009f2:	d40e      	bmi.n	8000a12 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009f4:	4b77      	ldr	r3, [pc, #476]	; (8000bd4 <HAL_RCC_OscConfig+0x2c8>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	0795      	lsls	r5, r2, #30
 80009fa:	d502      	bpl.n	8000a02 <HAL_RCC_OscConfig+0xf6>
 80009fc:	68e2      	ldr	r2, [r4, #12]
 80009fe:	2a01      	cmp	r2, #1
 8000a00:	d188      	bne.n	8000914 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	6921      	ldr	r1, [r4, #16]
 8000a06:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000a0a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a0e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a10:	e788      	b.n	8000924 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000a12:	68e2      	ldr	r2, [r4, #12]
 8000a14:	4b70      	ldr	r3, [pc, #448]	; (8000bd8 <HAL_RCC_OscConfig+0x2cc>)
 8000a16:	b1b2      	cbz	r2, 8000a46 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a1c:	f7ff fdb8 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a20:	4d6c      	ldr	r5, [pc, #432]	; (8000bd4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000a22:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a24:	682b      	ldr	r3, [r5, #0]
 8000a26:	0798      	lsls	r0, r3, #30
 8000a28:	d507      	bpl.n	8000a3a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a2a:	682b      	ldr	r3, [r5, #0]
 8000a2c:	6922      	ldr	r2, [r4, #16]
 8000a2e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a32:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a36:	602b      	str	r3, [r5, #0]
 8000a38:	e774      	b.n	8000924 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a3a:	f7ff fda9 	bl	8000590 <HAL_GetTick>
 8000a3e:	1b80      	subs	r0, r0, r6
 8000a40:	2802      	cmp	r0, #2
 8000a42:	d9ef      	bls.n	8000a24 <HAL_RCC_OscConfig+0x118>
 8000a44:	e7a7      	b.n	8000996 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000a46:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a48:	f7ff fda2 	bl	8000590 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a4c:	4d61      	ldr	r5, [pc, #388]	; (8000bd4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000a4e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a50:	682b      	ldr	r3, [r5, #0]
 8000a52:	0799      	lsls	r1, r3, #30
 8000a54:	f57f af66 	bpl.w	8000924 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a58:	f7ff fd9a 	bl	8000590 <HAL_GetTick>
 8000a5c:	1b80      	subs	r0, r0, r6
 8000a5e:	2802      	cmp	r0, #2
 8000a60:	d9f6      	bls.n	8000a50 <HAL_RCC_OscConfig+0x144>
 8000a62:	e798      	b.n	8000996 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a64:	6962      	ldr	r2, [r4, #20]
 8000a66:	4b5d      	ldr	r3, [pc, #372]	; (8000bdc <HAL_RCC_OscConfig+0x2d0>)
 8000a68:	b17a      	cbz	r2, 8000a8a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a6e:	f7ff fd8f 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a72:	4d58      	ldr	r5, [pc, #352]	; (8000bd4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a74:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a76:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a78:	079f      	lsls	r7, r3, #30
 8000a7a:	f53f af57 	bmi.w	800092c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a7e:	f7ff fd87 	bl	8000590 <HAL_GetTick>
 8000a82:	1b80      	subs	r0, r0, r6
 8000a84:	2802      	cmp	r0, #2
 8000a86:	d9f6      	bls.n	8000a76 <HAL_RCC_OscConfig+0x16a>
 8000a88:	e785      	b.n	8000996 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000a8a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a8c:	f7ff fd80 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a90:	4d50      	ldr	r5, [pc, #320]	; (8000bd4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000a92:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a94:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a96:	0798      	lsls	r0, r3, #30
 8000a98:	f57f af48 	bpl.w	800092c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a9c:	f7ff fd78 	bl	8000590 <HAL_GetTick>
 8000aa0:	1b80      	subs	r0, r0, r6
 8000aa2:	2802      	cmp	r0, #2
 8000aa4:	d9f6      	bls.n	8000a94 <HAL_RCC_OscConfig+0x188>
 8000aa6:	e776      	b.n	8000996 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000aa8:	4b4a      	ldr	r3, [pc, #296]	; (8000bd4 <HAL_RCC_OscConfig+0x2c8>)
 8000aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000aac:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000ab0:	d128      	bne.n	8000b04 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	9201      	str	r2, [sp, #4]
 8000ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000aba:	641a      	str	r2, [r3, #64]	; 0x40
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ac6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ac8:	4d45      	ldr	r5, [pc, #276]	; (8000be0 <HAL_RCC_OscConfig+0x2d4>)
 8000aca:	682b      	ldr	r3, [r5, #0]
 8000acc:	05d9      	lsls	r1, r3, #23
 8000ace:	d51b      	bpl.n	8000b08 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ad0:	68a3      	ldr	r3, [r4, #8]
 8000ad2:	4d40      	ldr	r5, [pc, #256]	; (8000bd4 <HAL_RCC_OscConfig+0x2c8>)
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d127      	bne.n	8000b28 <HAL_RCC_OscConfig+0x21c>
 8000ad8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ae0:	f7ff fd56 	bl	8000590 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ae4:	4d3b      	ldr	r5, [pc, #236]	; (8000bd4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000ae6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ae8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000aee:	079b      	lsls	r3, r3, #30
 8000af0:	d539      	bpl.n	8000b66 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	f43f af1e 	beq.w	8000934 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000af8:	4a36      	ldr	r2, [pc, #216]	; (8000bd4 <HAL_RCC_OscConfig+0x2c8>)
 8000afa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	e717      	b.n	8000934 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000b04:	2600      	movs	r6, #0
 8000b06:	e7df      	b.n	8000ac8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b08:	682b      	ldr	r3, [r5, #0]
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000b10:	f7ff fd3e 	bl	8000590 <HAL_GetTick>
 8000b14:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b16:	682b      	ldr	r3, [r5, #0]
 8000b18:	05da      	lsls	r2, r3, #23
 8000b1a:	d4d9      	bmi.n	8000ad0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b1c:	f7ff fd38 	bl	8000590 <HAL_GetTick>
 8000b20:	1bc0      	subs	r0, r0, r7
 8000b22:	2802      	cmp	r0, #2
 8000b24:	d9f7      	bls.n	8000b16 <HAL_RCC_OscConfig+0x20a>
 8000b26:	e736      	b.n	8000996 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b28:	2b05      	cmp	r3, #5
 8000b2a:	d104      	bne.n	8000b36 <HAL_RCC_OscConfig+0x22a>
 8000b2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	672b      	str	r3, [r5, #112]	; 0x70
 8000b34:	e7d0      	b.n	8000ad8 <HAL_RCC_OscConfig+0x1cc>
 8000b36:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b38:	f022 0201 	bic.w	r2, r2, #1
 8000b3c:	672a      	str	r2, [r5, #112]	; 0x70
 8000b3e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000b40:	f022 0204 	bic.w	r2, r2, #4
 8000b44:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1ca      	bne.n	8000ae0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000b4a:	f7ff fd21 	bl	8000590 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b4e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b52:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b54:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000b56:	0798      	lsls	r0, r3, #30
 8000b58:	d5cb      	bpl.n	8000af2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b5a:	f7ff fd19 	bl	8000590 <HAL_GetTick>
 8000b5e:	1bc0      	subs	r0, r0, r7
 8000b60:	4540      	cmp	r0, r8
 8000b62:	d9f7      	bls.n	8000b54 <HAL_RCC_OscConfig+0x248>
 8000b64:	e717      	b.n	8000996 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b66:	f7ff fd13 	bl	8000590 <HAL_GetTick>
 8000b6a:	1bc0      	subs	r0, r0, r7
 8000b6c:	4540      	cmp	r0, r8
 8000b6e:	d9bd      	bls.n	8000aec <HAL_RCC_OscConfig+0x1e0>
 8000b70:	e711      	b.n	8000996 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b72:	4d18      	ldr	r5, [pc, #96]	; (8000bd4 <HAL_RCC_OscConfig+0x2c8>)
 8000b74:	68ab      	ldr	r3, [r5, #8]
 8000b76:	f003 030c 	and.w	r3, r3, #12
 8000b7a:	2b08      	cmp	r3, #8
 8000b7c:	d047      	beq.n	8000c0e <HAL_RCC_OscConfig+0x302>
 8000b7e:	4e19      	ldr	r6, [pc, #100]	; (8000be4 <HAL_RCC_OscConfig+0x2d8>)
 8000b80:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b82:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000b84:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b86:	d135      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000b88:	f7ff fd02 	bl	8000590 <HAL_GetTick>
 8000b8c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b8e:	682b      	ldr	r3, [r5, #0]
 8000b90:	0199      	lsls	r1, r3, #6
 8000b92:	d429      	bmi.n	8000be8 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b94:	6a22      	ldr	r2, [r4, #32]
 8000b96:	69e3      	ldr	r3, [r4, #28]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b9c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ba0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ba2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ba6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000baa:	0852      	lsrs	r2, r2, #1
 8000bac:	3a01      	subs	r2, #1
 8000bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bb2:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fcea 	bl	8000590 <HAL_GetTick>
 8000bbc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bbe:	6823      	ldr	r3, [r4, #0]
 8000bc0:	019a      	lsls	r2, r3, #6
 8000bc2:	f53f aebb 	bmi.w	800093c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bc6:	f7ff fce3 	bl	8000590 <HAL_GetTick>
 8000bca:	1b40      	subs	r0, r0, r5
 8000bcc:	2802      	cmp	r0, #2
 8000bce:	d9f6      	bls.n	8000bbe <HAL_RCC_OscConfig+0x2b2>
 8000bd0:	e6e1      	b.n	8000996 <HAL_RCC_OscConfig+0x8a>
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	42470000 	.word	0x42470000
 8000bdc:	42470e80 	.word	0x42470e80
 8000be0:	40007000 	.word	0x40007000
 8000be4:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000be8:	f7ff fcd2 	bl	8000590 <HAL_GetTick>
 8000bec:	1bc0      	subs	r0, r0, r7
 8000bee:	2802      	cmp	r0, #2
 8000bf0:	d9cd      	bls.n	8000b8e <HAL_RCC_OscConfig+0x282>
 8000bf2:	e6d0      	b.n	8000996 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000bf4:	f7ff fccc 	bl	8000590 <HAL_GetTick>
 8000bf8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000bfa:	682b      	ldr	r3, [r5, #0]
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	f57f ae9d 	bpl.w	800093c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c02:	f7ff fcc5 	bl	8000590 <HAL_GetTick>
 8000c06:	1b00      	subs	r0, r0, r4
 8000c08:	2802      	cmp	r0, #2
 8000c0a:	d9f6      	bls.n	8000bfa <HAL_RCC_OscConfig+0x2ee>
 8000c0c:	e6c3      	b.n	8000996 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c0e:	2801      	cmp	r0, #1
 8000c10:	f43f aec2 	beq.w	8000998 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->CFGR;
 8000c14:	68a8      	ldr	r0, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c16:	69e3      	ldr	r3, [r4, #28]
 8000c18:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	f47f ae79 	bne.w	8000914 <HAL_RCC_OscConfig+0x8>
 8000c22:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c24:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	f47f ae73 	bne.w	8000914 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000c2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000c34:	4003      	ands	r3, r0
 8000c36:	4293      	cmp	r3, r2
 8000c38:	f47f ae6c 	bne.w	8000914 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c3e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000c42:	4293      	cmp	r3, r2
 8000c44:	f47f ae66 	bne.w	8000914 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000c48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000c4a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000c4e:	1ac0      	subs	r0, r0, r3
 8000c50:	bf18      	it	ne
 8000c52:	2001      	movne	r0, #1
 8000c54:	e6a0      	b.n	8000998 <HAL_RCC_OscConfig+0x8c>
 8000c56:	bf00      	nop

08000c58 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c58:	4913      	ldr	r1, [pc, #76]	; (8000ca8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c5a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c5c:	688b      	ldr	r3, [r1, #8]
 8000c5e:	f003 030c 	and.w	r3, r3, #12
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	d003      	beq.n	8000c6e <HAL_RCC_GetSysClockFreq+0x16>
 8000c66:	2b08      	cmp	r3, #8
 8000c68:	d003      	beq.n	8000c72 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000c6a:	4810      	ldr	r0, [pc, #64]	; (8000cac <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c6c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000c6e:	4810      	ldr	r0, [pc, #64]	; (8000cb0 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c70:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c72:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c74:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c76:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c78:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c7c:	bf14      	ite	ne
 8000c7e:	480c      	ldrne	r0, [pc, #48]	; (8000cb0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c80:	480a      	ldreq	r0, [pc, #40]	; (8000cac <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c82:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c86:	bf18      	it	ne
 8000c88:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c8e:	fba1 0100 	umull	r0, r1, r1, r0
 8000c92:	f7ff faab 	bl	80001ec <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c96:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000ca2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ca6:	bd08      	pop	{r3, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	00f42400 	.word	0x00f42400
 8000cb0:	017d7840 	.word	0x017d7840

08000cb4 <HAL_RCC_ClockConfig>:
{
 8000cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cb8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000cba:	4604      	mov	r4, r0
 8000cbc:	b910      	cbnz	r0, 8000cc4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cc4:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <HAL_RCC_ClockConfig+0x124>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	f002 020f 	and.w	r2, r2, #15
 8000ccc:	428a      	cmp	r2, r1
 8000cce:	d329      	bcc.n	8000d24 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cd0:	6821      	ldr	r1, [r4, #0]
 8000cd2:	078f      	lsls	r7, r1, #30
 8000cd4:	d42e      	bmi.n	8000d34 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cd6:	07c8      	lsls	r0, r1, #31
 8000cd8:	d441      	bmi.n	8000d5e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cda:	4b3f      	ldr	r3, [pc, #252]	; (8000dd8 <HAL_RCC_ClockConfig+0x124>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	f002 020f 	and.w	r2, r2, #15
 8000ce2:	4295      	cmp	r5, r2
 8000ce4:	d367      	bcc.n	8000db6 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ce6:	6822      	ldr	r2, [r4, #0]
 8000ce8:	0751      	lsls	r1, r2, #29
 8000cea:	d46d      	bmi.n	8000dc8 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cec:	0713      	lsls	r3, r2, #28
 8000cee:	d507      	bpl.n	8000d00 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000cf0:	4a3a      	ldr	r2, [pc, #232]	; (8000ddc <HAL_RCC_ClockConfig+0x128>)
 8000cf2:	6921      	ldr	r1, [r4, #16]
 8000cf4:	6893      	ldr	r3, [r2, #8]
 8000cf6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cfa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cfe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d00:	f7ff ffaa 	bl	8000c58 <HAL_RCC_GetSysClockFreq>
 8000d04:	4b35      	ldr	r3, [pc, #212]	; (8000ddc <HAL_RCC_ClockConfig+0x128>)
 8000d06:	4a36      	ldr	r2, [pc, #216]	; (8000de0 <HAL_RCC_ClockConfig+0x12c>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d0e:	5cd3      	ldrb	r3, [r2, r3]
 8000d10:	40d8      	lsrs	r0, r3
 8000d12:	4b34      	ldr	r3, [pc, #208]	; (8000de4 <HAL_RCC_ClockConfig+0x130>)
 8000d14:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000d16:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <HAL_RCC_ClockConfig+0x134>)
 8000d18:	6818      	ldr	r0, [r3, #0]
 8000d1a:	f7ff fbef 	bl	80004fc <HAL_InitTick>
  return HAL_OK;
 8000d1e:	2000      	movs	r0, #0
 8000d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d24:	b2ca      	uxtb	r2, r1
 8000d26:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	d1c5      	bne.n	8000cbe <HAL_RCC_ClockConfig+0xa>
 8000d32:	e7cd      	b.n	8000cd0 <HAL_RCC_ClockConfig+0x1c>
 8000d34:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d36:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d3a:	bf1e      	ittt	ne
 8000d3c:	689a      	ldrne	r2, [r3, #8]
 8000d3e:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000d42:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d44:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000d46:	bf42      	ittt	mi
 8000d48:	689a      	ldrmi	r2, [r3, #8]
 8000d4a:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000d4e:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	68a0      	ldr	r0, [r4, #8]
 8000d54:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000d58:	4302      	orrs	r2, r0
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	e7bb      	b.n	8000cd6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d5e:	6862      	ldr	r2, [r4, #4]
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <HAL_RCC_ClockConfig+0x128>)
 8000d62:	2a01      	cmp	r2, #1
 8000d64:	d11d      	bne.n	8000da2 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d6c:	d0a7      	beq.n	8000cbe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d6e:	4e1b      	ldr	r6, [pc, #108]	; (8000ddc <HAL_RCC_ClockConfig+0x128>)
 8000d70:	68b3      	ldr	r3, [r6, #8]
 8000d72:	f023 0303 	bic.w	r3, r3, #3
 8000d76:	4313      	orrs	r3, r2
 8000d78:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d7a:	f7ff fc09 	bl	8000590 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d7e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d82:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d84:	68b3      	ldr	r3, [r6, #8]
 8000d86:	6862      	ldr	r2, [r4, #4]
 8000d88:	f003 030c 	and.w	r3, r3, #12
 8000d8c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d90:	d0a3      	beq.n	8000cda <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d92:	f7ff fbfd 	bl	8000590 <HAL_GetTick>
 8000d96:	1bc0      	subs	r0, r0, r7
 8000d98:	4540      	cmp	r0, r8
 8000d9a:	d9f3      	bls.n	8000d84 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000d9c:	2003      	movs	r0, #3
}
 8000d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000da2:	1e91      	subs	r1, r2, #2
 8000da4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000da6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000da8:	d802      	bhi.n	8000db0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000daa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000dae:	e7dd      	b.n	8000d6c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db0:	f013 0f02 	tst.w	r3, #2
 8000db4:	e7da      	b.n	8000d6c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000db6:	b2ea      	uxtb	r2, r5
 8000db8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 030f 	and.w	r3, r3, #15
 8000dc0:	429d      	cmp	r5, r3
 8000dc2:	f47f af7c 	bne.w	8000cbe <HAL_RCC_ClockConfig+0xa>
 8000dc6:	e78e      	b.n	8000ce6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000dc8:	4904      	ldr	r1, [pc, #16]	; (8000ddc <HAL_RCC_ClockConfig+0x128>)
 8000dca:	68e0      	ldr	r0, [r4, #12]
 8000dcc:	688b      	ldr	r3, [r1, #8]
 8000dce:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000dd2:	4303      	orrs	r3, r0
 8000dd4:	608b      	str	r3, [r1, #8]
 8000dd6:	e789      	b.n	8000cec <HAL_RCC_ClockConfig+0x38>
 8000dd8:	40023c00 	.word	0x40023c00
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	08001880 	.word	0x08001880
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000004 	.word	0x20000004

08000dec <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8000dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dee:	4604      	mov	r4, r0
 8000df0:	460e      	mov	r6, r1
 8000df2:	4615      	mov	r5, r2
 8000df4:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000df6:	6821      	ldr	r1, [r4, #0]
 8000df8:	688a      	ldr	r2, [r1, #8]
 8000dfa:	ea36 0302 	bics.w	r3, r6, r2
 8000dfe:	d001      	beq.n	8000e04 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8000e00:	2000      	movs	r0, #0
}
 8000e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000e04:	1c6b      	adds	r3, r5, #1
 8000e06:	d0f7      	beq.n	8000df8 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8000e08:	f7ff fbc2 	bl	8000590 <HAL_GetTick>
 8000e0c:	1bc0      	subs	r0, r0, r7
 8000e0e:	4285      	cmp	r5, r0
 8000e10:	d8f1      	bhi.n	8000df6 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	685a      	ldr	r2, [r3, #4]
 8000e16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000e1a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e1c:	6862      	ldr	r2, [r4, #4]
 8000e1e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8000e22:	d10a      	bne.n	8000e3a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8000e24:	68a2      	ldr	r2, [r4, #8]
 8000e26:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000e2a:	d002      	beq.n	8000e32 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000e2c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000e30:	d103      	bne.n	8000e3a <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e38:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000e3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e3c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e40:	d107      	bne.n	8000e52 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e50:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8000e52:	2301      	movs	r3, #1
 8000e54:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8000e5e:	2003      	movs	r0, #3
 8000e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000e62 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8000e62:	b538      	push	{r3, r4, r5, lr}
 8000e64:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e66:	6842      	ldr	r2, [r0, #4]
 8000e68:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8000e6c:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000e6e:	d11f      	bne.n	8000eb0 <SPI_EndRxTransaction+0x4e>
 8000e70:	6882      	ldr	r2, [r0, #8]
 8000e72:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000e76:	d002      	beq.n	8000e7e <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000e78:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8000e7c:	d107      	bne.n	8000e8e <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8000e7e:	6825      	ldr	r5, [r4, #0]
 8000e80:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8000e82:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8000e86:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8000e8a:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8000e8c:	d007      	beq.n	8000e9e <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000e8e:	460a      	mov	r2, r1
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	4620      	mov	r0, r4
 8000e94:	f7ff ffaa 	bl	8000dec <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000e98:	b920      	cbnz	r0, 8000ea4 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8000e9a:	2000      	movs	r0, #0
 8000e9c:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8000e9e:	460a      	mov	r2, r1
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	e7f6      	b.n	8000e92 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000ea4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ea6:	f043 0320 	orr.w	r3, r3, #32
 8000eaa:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000eac:	2003      	movs	r0, #3
 8000eae:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	e7ee      	b.n	8000e94 <SPI_EndRxTransaction+0x32>
	...

08000eb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8000eb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000eba:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000ebc:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <SPI_EndRxTxTransaction+0x54>)
 8000ebe:	4e14      	ldr	r6, [pc, #80]	; (8000f10 <SPI_EndRxTxTransaction+0x58>)
 8000ec0:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000ec2:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000ec4:	fbb5 f6f6 	udiv	r6, r5, r6
 8000ec8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8000ecc:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000ece:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8000ed2:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8000ed4:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8000ed6:	d10d      	bne.n	8000ef4 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8000ed8:	460a      	mov	r2, r1
 8000eda:	2180      	movs	r1, #128	; 0x80
 8000edc:	f7ff ff86 	bl	8000dec <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8000ee0:	b910      	cbnz	r0, 8000ee8 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8000ee2:	2000      	movs	r0, #0
}
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000ee8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000eea:	f043 0320 	orr.w	r3, r3, #32
 8000eee:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	e7f7      	b.n	8000ee4 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8000ef4:	9b01      	ldr	r3, [sp, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f3      	beq.n	8000ee2 <SPI_EndRxTxTransaction+0x2a>
      count--;
 8000efa:	9b01      	ldr	r3, [sp, #4]
 8000efc:	3b01      	subs	r3, #1
 8000efe:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	061b      	lsls	r3, r3, #24
 8000f06:	d4f5      	bmi.n	8000ef4 <SPI_EndRxTxTransaction+0x3c>
 8000f08:	e7eb      	b.n	8000ee2 <SPI_EndRxTxTransaction+0x2a>
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008
 8000f10:	016e3600 	.word	0x016e3600

08000f14 <HAL_SPI_Init>:
{
 8000f14:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8000f16:	4604      	mov	r4, r0
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	d036      	beq.n	8000f8a <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000f20:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8000f24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f28:	b91b      	cbnz	r3, 8000f32 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8000f2a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8000f2e:	f000 fbf3 	bl	8001718 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8000f32:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f34:	68a0      	ldr	r0, [r4, #8]
 8000f36:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8000f3e:	680b      	ldr	r3, [r1, #0]
 8000f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f44:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f46:	6863      	ldr	r3, [r4, #4]
 8000f48:	4303      	orrs	r3, r0
 8000f4a:	68e0      	ldr	r0, [r4, #12]
 8000f4c:	4303      	orrs	r3, r0
 8000f4e:	6920      	ldr	r0, [r4, #16]
 8000f50:	4303      	orrs	r3, r0
 8000f52:	6960      	ldr	r0, [r4, #20]
 8000f54:	4303      	orrs	r3, r0
 8000f56:	69e0      	ldr	r0, [r4, #28]
 8000f58:	4303      	orrs	r3, r0
 8000f5a:	6a20      	ldr	r0, [r4, #32]
 8000f5c:	4303      	orrs	r3, r0
 8000f5e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f60:	4303      	orrs	r3, r0
 8000f62:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8000f66:	4303      	orrs	r3, r0
 8000f68:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000f6a:	0c12      	lsrs	r2, r2, #16
 8000f6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f6e:	f002 0204 	and.w	r2, r2, #4
 8000f72:	431a      	orrs	r2, r3
 8000f74:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8000f76:	69cb      	ldr	r3, [r1, #28]
 8000f78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f7c:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f7e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8000f80:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f82:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000f84:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8000f88:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f8a:	2001      	movs	r0, #1
}
 8000f8c:	bd10      	pop	{r4, pc}

08000f8e <HAL_SPI_Transmit>:
{
 8000f8e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000f92:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8000f94:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8000f98:	2b01      	cmp	r3, #1
{
 8000f9a:	4604      	mov	r4, r0
 8000f9c:	460d      	mov	r5, r1
 8000f9e:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8000fa0:	f000 809b 	beq.w	80010da <HAL_SPI_Transmit+0x14c>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8000faa:	f7ff faf1 	bl	8000590 <HAL_GetTick>
 8000fae:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8000fb0:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8000fb4:	b2c0      	uxtb	r0, r0
 8000fb6:	2801      	cmp	r0, #1
 8000fb8:	f040 808d 	bne.w	80010d6 <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8000fbc:	2d00      	cmp	r5, #0
 8000fbe:	d05d      	beq.n	800107c <HAL_SPI_Transmit+0xee>
 8000fc0:	f1b8 0f00 	cmp.w	r8, #0
 8000fc4:	d05a      	beq.n	800107c <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fcc:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000fce:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000fd0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000fd2:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000fd4:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8000fd8:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8000fda:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8000fdc:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8000fde:	6420      	str	r0, [r4, #64]	; 0x40
 8000fe0:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8000fe2:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8000fe8:	bf08      	it	eq
 8000fea:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8000fec:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8000ff0:	bf04      	itt	eq
 8000ff2:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8000ff6:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000ff8:	6803      	ldr	r3, [r0, #0]
 8000ffa:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8000ffc:	bf5e      	ittt	pl
 8000ffe:	6803      	ldrpl	r3, [r0, #0]
 8001000:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001004:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001006:	68e3      	ldr	r3, [r4, #12]
 8001008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800100c:	6863      	ldr	r3, [r4, #4]
 800100e:	d13e      	bne.n	800108e <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001010:	b113      	cbz	r3, 8001018 <HAL_SPI_Transmit+0x8a>
 8001012:	f1b8 0f01 	cmp.w	r8, #1
 8001016:	d107      	bne.n	8001028 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001018:	f835 3b02 	ldrh.w	r3, [r5], #2
 800101c:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800101e:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001020:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001022:	3b01      	subs	r3, #1
 8001024:	b29b      	uxth	r3, r3
 8001026:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001028:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800102a:	b29b      	uxth	r3, r3
 800102c:	b9a3      	cbnz	r3, 8001058 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800102e:	463a      	mov	r2, r7
 8001030:	4631      	mov	r1, r6
 8001032:	4620      	mov	r0, r4
 8001034:	f7ff ff40 	bl	8000eb8 <SPI_EndRxTxTransaction>
 8001038:	2800      	cmp	r0, #0
 800103a:	d149      	bne.n	80010d0 <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800103c:	68a3      	ldr	r3, [r4, #8]
 800103e:	b933      	cbnz	r3, 800104e <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	6823      	ldr	r3, [r4, #0]
 8001044:	68da      	ldr	r2, [r3, #12]
 8001046:	9201      	str	r2, [sp, #4]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800104e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001050:	3000      	adds	r0, #0
 8001052:	bf18      	it	ne
 8001054:	2001      	movne	r0, #1
 8001056:	e011      	b.n	800107c <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001058:	6822      	ldr	r2, [r4, #0]
 800105a:	6893      	ldr	r3, [r2, #8]
 800105c:	0798      	lsls	r0, r3, #30
 800105e:	d505      	bpl.n	800106c <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001060:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001062:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001066:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001068:	6323      	str	r3, [r4, #48]	; 0x30
 800106a:	e7d9      	b.n	8001020 <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800106c:	f7ff fa90 	bl	8000590 <HAL_GetTick>
 8001070:	1bc0      	subs	r0, r0, r7
 8001072:	42b0      	cmp	r0, r6
 8001074:	d3d8      	bcc.n	8001028 <HAL_SPI_Transmit+0x9a>
 8001076:	1c71      	adds	r1, r6, #1
 8001078:	d0d6      	beq.n	8001028 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 800107a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800107c:	2301      	movs	r3, #1
 800107e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001082:	2300      	movs	r3, #0
 8001084:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001088:	b002      	add	sp, #8
 800108a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800108e:	b113      	cbz	r3, 8001096 <HAL_SPI_Transmit+0x108>
 8001090:	f1b8 0f01 	cmp.w	r8, #1
 8001094:	d108      	bne.n	80010a8 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001096:	782b      	ldrb	r3, [r5, #0]
 8001098:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800109a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800109c:	3301      	adds	r3, #1
 800109e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80010a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010a2:	3b01      	subs	r3, #1
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80010a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d0be      	beq.n	800102e <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	0792      	lsls	r2, r2, #30
 80010b6:	d503      	bpl.n	80010c0 <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80010b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80010ba:	7812      	ldrb	r2, [r2, #0]
 80010bc:	731a      	strb	r2, [r3, #12]
 80010be:	e7ec      	b.n	800109a <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80010c0:	f7ff fa66 	bl	8000590 <HAL_GetTick>
 80010c4:	1bc0      	subs	r0, r0, r7
 80010c6:	4286      	cmp	r6, r0
 80010c8:	d8ee      	bhi.n	80010a8 <HAL_SPI_Transmit+0x11a>
 80010ca:	1c73      	adds	r3, r6, #1
 80010cc:	d0ec      	beq.n	80010a8 <HAL_SPI_Transmit+0x11a>
 80010ce:	e7d4      	b.n	800107a <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80010d0:	2320      	movs	r3, #32
 80010d2:	6563      	str	r3, [r4, #84]	; 0x54
 80010d4:	e7b2      	b.n	800103c <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 80010d6:	2002      	movs	r0, #2
 80010d8:	e7d0      	b.n	800107c <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 80010da:	2002      	movs	r0, #2
 80010dc:	e7d4      	b.n	8001088 <HAL_SPI_Transmit+0xfa>

080010de <HAL_SPI_TransmitReceive>:
{
 80010de:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80010e2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80010e4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80010e8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80010ea:	2b01      	cmp	r3, #1
{
 80010ec:	4604      	mov	r4, r0
 80010ee:	460d      	mov	r5, r1
 80010f0:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80010f2:	f000 80e2 	beq.w	80012ba <HAL_SPI_TransmitReceive+0x1dc>
 80010f6:	2301      	movs	r3, #1
 80010f8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80010fc:	f7ff fa48 	bl	8000590 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001100:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8001104:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8001106:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001108:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800110a:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800110c:	d00a      	beq.n	8001124 <HAL_SPI_TransmitReceive+0x46>
 800110e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001112:	f040 80d0 	bne.w	80012b6 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001116:	68a0      	ldr	r0, [r4, #8]
 8001118:	2800      	cmp	r0, #0
 800111a:	f040 80cc 	bne.w	80012b6 <HAL_SPI_TransmitReceive+0x1d8>
 800111e:	2b04      	cmp	r3, #4
 8001120:	f040 80c9 	bne.w	80012b6 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001124:	2d00      	cmp	r5, #0
 8001126:	f000 80c4 	beq.w	80012b2 <HAL_SPI_TransmitReceive+0x1d4>
 800112a:	f1b9 0f00 	cmp.w	r9, #0
 800112e:	f000 80c0 	beq.w	80012b2 <HAL_SPI_TransmitReceive+0x1d4>
 8001132:	2e00      	cmp	r6, #0
 8001134:	f000 80bd 	beq.w	80012b2 <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001138:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800113c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001140:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001142:	bf1c      	itt	ne
 8001144:	2305      	movne	r3, #5
 8001146:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800114a:	2300      	movs	r3, #0
 800114c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 800114e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001150:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001152:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001154:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001156:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001158:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 800115a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800115c:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800115e:	bf58      	it	pl
 8001160:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001162:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001164:	bf58      	it	pl
 8001166:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800116a:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 800116c:	bf58      	it	pl
 800116e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001170:	68e2      	ldr	r2, [r4, #12]
 8001172:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001176:	d158      	bne.n	800122a <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001178:	b109      	cbz	r1, 800117e <HAL_SPI_TransmitReceive+0xa0>
 800117a:	2e01      	cmp	r6, #1
 800117c:	d107      	bne.n	800118e <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800117e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001182:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001184:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001186:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001188:	3b01      	subs	r3, #1
 800118a:	b29b      	uxth	r3, r3
 800118c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800118e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001190:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001192:	b29b      	uxth	r3, r3
 8001194:	b9ab      	cbnz	r3, 80011c2 <HAL_SPI_TransmitReceive+0xe4>
 8001196:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001198:	b29b      	uxth	r3, r3
 800119a:	b993      	cbnz	r3, 80011c2 <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800119c:	4642      	mov	r2, r8
 800119e:	4639      	mov	r1, r7
 80011a0:	4620      	mov	r0, r4
 80011a2:	f7ff fe89 	bl	8000eb8 <SPI_EndRxTxTransaction>
 80011a6:	2800      	cmp	r0, #0
 80011a8:	f040 8081 	bne.w	80012ae <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80011ac:	68a3      	ldr	r3, [r4, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d132      	bne.n	8001218 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80011b2:	6823      	ldr	r3, [r4, #0]
 80011b4:	9001      	str	r0, [sp, #4]
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	9201      	str	r2, [sp, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	9301      	str	r3, [sp, #4]
 80011be:	9b01      	ldr	r3, [sp, #4]
 80011c0:	e02a      	b.n	8001218 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80011c2:	6822      	ldr	r2, [r4, #0]
 80011c4:	6893      	ldr	r3, [r2, #8]
 80011c6:	0799      	lsls	r1, r3, #30
 80011c8:	d50d      	bpl.n	80011e6 <HAL_SPI_TransmitReceive+0x108>
 80011ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	b153      	cbz	r3, 80011e6 <HAL_SPI_TransmitReceive+0x108>
 80011d0:	b14d      	cbz	r5, 80011e6 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80011d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80011d4:	f833 1b02 	ldrh.w	r1, [r3], #2
 80011d8:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80011da:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80011dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80011de:	3b01      	subs	r3, #1
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80011e4:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80011e6:	6893      	ldr	r3, [r2, #8]
 80011e8:	07db      	lsls	r3, r3, #31
 80011ea:	d50c      	bpl.n	8001206 <HAL_SPI_TransmitReceive+0x128>
 80011ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	b14b      	cbz	r3, 8001206 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80011f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80011f4:	68d2      	ldr	r2, [r2, #12]
 80011f6:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80011fa:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80011fc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80011fe:	3b01      	subs	r3, #1
 8001200:	b29b      	uxth	r3, r3
 8001202:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001204:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001206:	f7ff f9c3 	bl	8000590 <HAL_GetTick>
 800120a:	eba0 0008 	sub.w	r0, r0, r8
 800120e:	4287      	cmp	r7, r0
 8001210:	d8be      	bhi.n	8001190 <HAL_SPI_TransmitReceive+0xb2>
 8001212:	1c7e      	adds	r6, r7, #1
 8001214:	d0bc      	beq.n	8001190 <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8001216:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001218:	2301      	movs	r3, #1
 800121a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800121e:	2300      	movs	r3, #0
 8001220:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001224:	b003      	add	sp, #12
 8001226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800122a:	b109      	cbz	r1, 8001230 <HAL_SPI_TransmitReceive+0x152>
 800122c:	2e01      	cmp	r6, #1
 800122e:	d108      	bne.n	8001242 <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001230:	782a      	ldrb	r2, [r5, #0]
 8001232:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001234:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001236:	3301      	adds	r3, #1
 8001238:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800123a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800123c:	3b01      	subs	r3, #1
 800123e:	b29b      	uxth	r3, r3
 8001240:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001242:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001244:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001246:	b29b      	uxth	r3, r3
 8001248:	b91b      	cbnz	r3, 8001252 <HAL_SPI_TransmitReceive+0x174>
 800124a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800124c:	b29b      	uxth	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0a4      	beq.n	800119c <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001252:	6822      	ldr	r2, [r4, #0]
 8001254:	6893      	ldr	r3, [r2, #8]
 8001256:	0798      	lsls	r0, r3, #30
 8001258:	d50e      	bpl.n	8001278 <HAL_SPI_TransmitReceive+0x19a>
 800125a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800125c:	b29b      	uxth	r3, r3
 800125e:	b15b      	cbz	r3, 8001278 <HAL_SPI_TransmitReceive+0x19a>
 8001260:	b155      	cbz	r5, 8001278 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001262:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8001268:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800126a:	3301      	adds	r3, #1
 800126c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800126e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001270:	3b01      	subs	r3, #1
 8001272:	b29b      	uxth	r3, r3
 8001274:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001276:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001278:	6822      	ldr	r2, [r4, #0]
 800127a:	6893      	ldr	r3, [r2, #8]
 800127c:	07d9      	lsls	r1, r3, #31
 800127e:	d50d      	bpl.n	800129c <HAL_SPI_TransmitReceive+0x1be>
 8001280:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001282:	b29b      	uxth	r3, r3
 8001284:	b153      	cbz	r3, 800129c <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001286:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001288:	68d2      	ldr	r2, [r2, #12]
 800128a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800128c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800128e:	3301      	adds	r3, #1
 8001290:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001292:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001294:	3b01      	subs	r3, #1
 8001296:	b29b      	uxth	r3, r3
 8001298:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800129a:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800129c:	f7ff f978 	bl	8000590 <HAL_GetTick>
 80012a0:	eba0 0008 	sub.w	r0, r0, r8
 80012a4:	4287      	cmp	r7, r0
 80012a6:	d8cd      	bhi.n	8001244 <HAL_SPI_TransmitReceive+0x166>
 80012a8:	1c7b      	adds	r3, r7, #1
 80012aa:	d0cb      	beq.n	8001244 <HAL_SPI_TransmitReceive+0x166>
 80012ac:	e7b3      	b.n	8001216 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80012ae:	2320      	movs	r3, #32
 80012b0:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80012b2:	2001      	movs	r0, #1
 80012b4:	e7b0      	b.n	8001218 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 80012b6:	2002      	movs	r0, #2
 80012b8:	e7ae      	b.n	8001218 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 80012ba:	2002      	movs	r0, #2
 80012bc:	e7b2      	b.n	8001224 <HAL_SPI_TransmitReceive+0x146>

080012be <HAL_SPI_Receive>:
{
 80012be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80012c2:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80012c4:	6843      	ldr	r3, [r0, #4]
 80012c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 80012ca:	4604      	mov	r4, r0
 80012cc:	4688      	mov	r8, r1
 80012ce:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80012d0:	d10c      	bne.n	80012ec <HAL_SPI_Receive+0x2e>
 80012d2:	6883      	ldr	r3, [r0, #8]
 80012d4:	b953      	cbnz	r3, 80012ec <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80012d6:	2304      	movs	r3, #4
 80012d8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80012dc:	4613      	mov	r3, r2
 80012de:	9500      	str	r5, [sp, #0]
 80012e0:	460a      	mov	r2, r1
 80012e2:	f7ff fefc 	bl	80010de <HAL_SPI_TransmitReceive>
}
 80012e6:	b002      	add	sp, #8
 80012e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 80012ec:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d079      	beq.n	80013e8 <HAL_SPI_Receive+0x12a>
 80012f4:	2301      	movs	r3, #1
 80012f6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80012fa:	f7ff f949 	bl	8000590 <HAL_GetTick>
 80012fe:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001300:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8001304:	b2c0      	uxtb	r0, r0
 8001306:	2801      	cmp	r0, #1
 8001308:	d16c      	bne.n	80013e4 <HAL_SPI_Receive+0x126>
  if ((pData == NULL) || (Size == 0U))
 800130a:	f1b8 0f00 	cmp.w	r8, #0
 800130e:	d057      	beq.n	80013c0 <HAL_SPI_Receive+0x102>
 8001310:	2f00      	cmp	r7, #0
 8001312:	d055      	beq.n	80013c0 <HAL_SPI_Receive+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001314:	2304      	movs	r3, #4
 8001316:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800131a:	2300      	movs	r3, #0
 800131c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800131e:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8001320:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8001322:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001324:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001326:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001328:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800132a:	68a3      	ldr	r3, [r4, #8]
  hspi->RxXferSize  = Size;
 800132c:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800132e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001332:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001334:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 8001338:	bf02      	ittt	eq
 800133a:	681a      	ldreq	r2, [r3, #0]
 800133c:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8001340:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001346:	bf5e      	ittt	pl
 8001348:	681a      	ldrpl	r2, [r3, #0]
 800134a:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800134e:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001350:	68e3      	ldr	r3, [r4, #12]
 8001352:	b1f3      	cbz	r3, 8001392 <HAL_SPI_Receive+0xd4>
    while (hspi->RxXferCount > 0U)
 8001354:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001356:	b29b      	uxth	r3, r3
 8001358:	b1fb      	cbz	r3, 800139a <HAL_SPI_Receive+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	07d2      	lsls	r2, r2, #31
 8001360:	d535      	bpl.n	80013ce <HAL_SPI_Receive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001366:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800136a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800136c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800136e:	3b01      	subs	r3, #1
 8001370:	b29b      	uxth	r3, r3
 8001372:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001374:	e7ee      	b.n	8001354 <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	07d0      	lsls	r0, r2, #31
 800137c:	d518      	bpl.n	80013b0 <HAL_SPI_Receive+0xf2>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800137e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001380:	7b1b      	ldrb	r3, [r3, #12]
 8001382:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001384:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001386:	3301      	adds	r3, #1
 8001388:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800138a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800138c:	3b01      	subs	r3, #1
 800138e:	b29b      	uxth	r3, r3
 8001390:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8001392:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001394:	b29b      	uxth	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1ed      	bne.n	8001376 <HAL_SPI_Receive+0xb8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800139a:	4632      	mov	r2, r6
 800139c:	4629      	mov	r1, r5
 800139e:	4620      	mov	r0, r4
 80013a0:	f7ff fd5f 	bl	8000e62 <SPI_EndRxTransaction>
 80013a4:	b9d8      	cbnz	r0, 80013de <HAL_SPI_Receive+0x120>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80013a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80013a8:	3000      	adds	r0, #0
 80013aa:	bf18      	it	ne
 80013ac:	2001      	movne	r0, #1
 80013ae:	e007      	b.n	80013c0 <HAL_SPI_Receive+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80013b0:	f7ff f8ee 	bl	8000590 <HAL_GetTick>
 80013b4:	1b80      	subs	r0, r0, r6
 80013b6:	4285      	cmp	r5, r0
 80013b8:	d8eb      	bhi.n	8001392 <HAL_SPI_Receive+0xd4>
 80013ba:	1c69      	adds	r1, r5, #1
 80013bc:	d0e9      	beq.n	8001392 <HAL_SPI_Receive+0xd4>
          errorcode = HAL_TIMEOUT;
 80013be:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80013c0:	2301      	movs	r3, #1
 80013c2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80013c6:	2300      	movs	r3, #0
 80013c8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80013cc:	e78b      	b.n	80012e6 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80013ce:	f7ff f8df 	bl	8000590 <HAL_GetTick>
 80013d2:	1b80      	subs	r0, r0, r6
 80013d4:	4285      	cmp	r5, r0
 80013d6:	d8bd      	bhi.n	8001354 <HAL_SPI_Receive+0x96>
 80013d8:	1c6b      	adds	r3, r5, #1
 80013da:	d0bb      	beq.n	8001354 <HAL_SPI_Receive+0x96>
 80013dc:	e7ef      	b.n	80013be <HAL_SPI_Receive+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80013de:	2320      	movs	r3, #32
 80013e0:	6563      	str	r3, [r4, #84]	; 0x54
 80013e2:	e7e0      	b.n	80013a6 <HAL_SPI_Receive+0xe8>
    errorcode = HAL_BUSY;
 80013e4:	2002      	movs	r0, #2
 80013e6:	e7eb      	b.n	80013c0 <HAL_SPI_Receive+0x102>
  __HAL_LOCK(hspi);
 80013e8:	2002      	movs	r0, #2
 80013ea:	e77c      	b.n	80012e6 <HAL_SPI_Receive+0x28>

080013ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ec:	b530      	push	{r4, r5, lr}
 80013ee:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f0:	2230      	movs	r2, #48	; 0x30
 80013f2:	2100      	movs	r1, #0
 80013f4:	a808      	add	r0, sp, #32
 80013f6:	f000 fa2f 	bl	8001858 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013fa:	2100      	movs	r1, #0
 80013fc:	2214      	movs	r2, #20
 80013fe:	a803      	add	r0, sp, #12
 8001400:	f000 fa2a 	bl	8001858 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001404:	2400      	movs	r4, #0
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <SystemClock_Config+0x90>)
 8001408:	9401      	str	r4, [sp, #4]
 800140a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800140c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <SystemClock_Config+0x94>)
 800141e:	9402      	str	r4, [sp, #8]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800142a:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001434:	2301      	movs	r3, #1
 8001436:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001438:	2310      	movs	r3, #16
 800143a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 800143c:	2308      	movs	r3, #8
 800143e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001440:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001442:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001444:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001446:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001448:	2304      	movs	r3, #4
 800144a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800144c:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001450:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001452:	f7ff fa5b 	bl	800090c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001456:	f7ff fa1d 	bl	8000894 <HAL_PWREx_EnableOverDrive>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145a:	230f      	movs	r3, #15
 800145c:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800145e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001462:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001464:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001466:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800146a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146c:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800146e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001470:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001472:	f7ff fc1f 	bl	8000cb4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001476:	b015      	add	sp, #84	; 0x54
 8001478:	bd30      	pop	{r4, r5, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800
 8001480:	40007000 	.word	0x40007000

08001484 <main>:
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8001488:	f7ff f85c 	bl	8000544 <HAL_Init>
  SystemClock_Config();
 800148c:	f7ff ffae 	bl	80013ec <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	2214      	movs	r2, #20
 8001492:	2100      	movs	r1, #0
 8001494:	eb0d 0002 	add.w	r0, sp, r2
 8001498:	f000 f9de 	bl	8001858 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149c:	2400      	movs	r4, #0
 800149e:	4b87      	ldr	r3, [pc, #540]	; (80016bc <main+0x238>)
 80014a0:	9401      	str	r4, [sp, #4]
 80014a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80014a4:	4886      	ldr	r0, [pc, #536]	; (80016c0 <main+0x23c>)
  hspi5.Instance = SPI5;
 80014a6:	4d87      	ldr	r5, [pc, #540]	; (80016c4 <main+0x240>)
  spiTxBuf[0]=0x20;
 80014a8:	4e87      	ldr	r6, [pc, #540]	; (80016c8 <main+0x244>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014aa:	f042 0220 	orr.w	r2, r2, #32
 80014ae:	631a      	str	r2, [r3, #48]	; 0x30
 80014b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014b2:	f002 0220 	and.w	r2, r2, #32
 80014b6:	9201      	str	r2, [sp, #4]
 80014b8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	9402      	str	r4, [sp, #8]
 80014bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014be:	f042 0204 	orr.w	r2, r2, #4
 80014c2:	631a      	str	r2, [r3, #48]	; 0x30
 80014c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014c6:	f002 0204 	and.w	r2, r2, #4
 80014ca:	9202      	str	r2, [sp, #8]
 80014cc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	9403      	str	r4, [sp, #12]
 80014d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014d2:	f042 0201 	orr.w	r2, r2, #1
 80014d6:	631a      	str	r2, [r3, #48]	; 0x30
 80014d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014da:	f002 0201 	and.w	r2, r2, #1
 80014de:	9203      	str	r2, [sp, #12]
 80014e0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e2:	9404      	str	r4, [sp, #16]
 80014e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014e6:	f042 0208 	orr.w	r2, r2, #8
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2102      	movs	r1, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014f8:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80014fa:	f7ff f9b9 	bl	8000870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80014fe:	4622      	mov	r2, r4
 8001500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001504:	4871      	ldr	r0, [pc, #452]	; (80016cc <main+0x248>)

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001506:	2702      	movs	r7, #2
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001508:	f7ff f9b2 	bl	8000870 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001510:	a905      	add	r1, sp, #20
 8001512:	486b      	ldr	r0, [pc, #428]	; (80016c0 <main+0x23c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001516:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001518:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151e:	f7ff f8bb 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001522:	4b6b      	ldr	r3, [pc, #428]	; (80016d0 <main+0x24c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	486b      	ldr	r0, [pc, #428]	; (80016d4 <main+0x250>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001526:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800152c:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f7ff f8b3 	bl	8000698 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001536:	a905      	add	r1, sp, #20
 8001538:	4864      	ldr	r0, [pc, #400]	; (80016cc <main+0x248>)
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800153a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001540:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001544:	f7ff f8a8 	bl	8000698 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001548:	4621      	mov	r1, r4
 800154a:	4622      	mov	r2, r4
 800154c:	2007      	movs	r0, #7
 800154e:	f7ff f84b 	bl	80005e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001552:	2007      	movs	r0, #7
 8001554:	f7ff f87c 	bl	8000650 <HAL_NVIC_EnableIRQ>
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001558:	4a5f      	ldr	r2, [pc, #380]	; (80016d8 <main+0x254>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800155a:	60ac      	str	r4, [r5, #8]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800155c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001560:	e885 000c 	stmia.w	r5, {r2, r3}
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001568:	61ab      	str	r3, [r5, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800156a:	2318      	movs	r3, #24
 800156c:	61eb      	str	r3, [r5, #28]
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800156e:	4628      	mov	r0, r5
  hspi5.Init.CRCPolynomial = 10;
 8001570:	230a      	movs	r3, #10
 8001572:	62eb      	str	r3, [r5, #44]	; 0x2c
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001574:	60ec      	str	r4, [r5, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001576:	612c      	str	r4, [r5, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001578:	616c      	str	r4, [r5, #20]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800157a:	622c      	str	r4, [r5, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800157c:	626c      	str	r4, [r5, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800157e:	62ac      	str	r4, [r5, #40]	; 0x28
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001580:	f7ff fcc8 	bl	8000f14 <HAL_SPI_Init>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001584:	4622      	mov	r2, r4
 8001586:	4639      	mov	r1, r7
 8001588:	484d      	ldr	r0, [pc, #308]	; (80016c0 <main+0x23c>)
 800158a:	f7ff f971 	bl	8000870 <HAL_GPIO_WritePin>
  spiTxBuf[1]=0xff;
 800158e:	23ff      	movs	r3, #255	; 0xff
  spiTxBuf[0]=0x20;
 8001590:	f04f 0920 	mov.w	r9, #32
  spiTxBuf[1]=0xff;
 8001594:	7073      	strb	r3, [r6, #1]
  HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001596:	463a      	mov	r2, r7
 8001598:	2332      	movs	r3, #50	; 0x32
 800159a:	4631      	mov	r1, r6
 800159c:	4628      	mov	r0, r5
  spiTxBuf[0]=0x20;
 800159e:	f886 9000 	strb.w	r9, [r6]
  HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80015a2:	f7ff fcf4 	bl	8000f8e <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80015a6:	4642      	mov	r2, r8
 80015a8:	4639      	mov	r1, r7
 80015aa:	4845      	ldr	r0, [pc, #276]	; (80016c0 <main+0x23c>)
 80015ac:	f7ff f960 	bl	8000870 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80015b0:	4622      	mov	r2, r4
 80015b2:	4639      	mov	r1, r7
 80015b4:	4842      	ldr	r0, [pc, #264]	; (80016c0 <main+0x23c>)
 80015b6:	f7ff f95b 	bl	8000870 <HAL_GPIO_WritePin>
  spiTxBuf[0]=0x21;
 80015ba:	2321      	movs	r3, #33	; 0x21
 80015bc:	7033      	strb	r3, [r6, #0]
    HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80015be:	463a      	mov	r2, r7
 80015c0:	2332      	movs	r3, #50	; 0x32
 80015c2:	4631      	mov	r1, r6
 80015c4:	4628      	mov	r0, r5
    spiTxBuf[1]=0x00;
 80015c6:	7074      	strb	r4, [r6, #1]
    HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80015c8:	f7ff fce1 	bl	8000f8e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80015cc:	4642      	mov	r2, r8
 80015ce:	4639      	mov	r1, r7
 80015d0:	483b      	ldr	r0, [pc, #236]	; (80016c0 <main+0x23c>)
 80015d2:	f7ff f94d 	bl	8000870 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80015d6:	4622      	mov	r2, r4
 80015d8:	4639      	mov	r1, r7
 80015da:	4839      	ldr	r0, [pc, #228]	; (80016c0 <main+0x23c>)
 80015dc:	f7ff f948 	bl	8000870 <HAL_GPIO_WritePin>
    spiTxBuf[0]=0x22;
 80015e0:	2322      	movs	r3, #34	; 0x22
 80015e2:	7033      	strb	r3, [r6, #0]
      HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80015e4:	463a      	mov	r2, r7
 80015e6:	2332      	movs	r3, #50	; 0x32
 80015e8:	4631      	mov	r1, r6
 80015ea:	4628      	mov	r0, r5
      spiTxBuf[1]=0x00;
 80015ec:	7074      	strb	r4, [r6, #1]
      HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 80015ee:	f7ff fcce 	bl	8000f8e <HAL_SPI_Transmit>
      HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80015f2:	4642      	mov	r2, r8
 80015f4:	4639      	mov	r1, r7
 80015f6:	4832      	ldr	r0, [pc, #200]	; (80016c0 <main+0x23c>)
 80015f8:	f7ff f93a 	bl	8000870 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 80015fc:	4622      	mov	r2, r4
 80015fe:	4639      	mov	r1, r7
 8001600:	482f      	ldr	r0, [pc, #188]	; (80016c0 <main+0x23c>)
 8001602:	f7ff f935 	bl	8000870 <HAL_GPIO_WritePin>
      spiTxBuf[0]=0x23;
 8001606:	2323      	movs	r3, #35	; 0x23
 8001608:	7033      	strb	r3, [r6, #0]
        HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 800160a:	463a      	mov	r2, r7
 800160c:	2332      	movs	r3, #50	; 0x32
 800160e:	4631      	mov	r1, r6
 8001610:	4628      	mov	r0, r5
        spiTxBuf[1]=0x20;
 8001612:	f886 9001 	strb.w	r9, [r6, #1]
        HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001616:	f7ff fcba 	bl	8000f8e <HAL_SPI_Transmit>
        HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 800161a:	4642      	mov	r2, r8
 800161c:	4639      	mov	r1, r7
 800161e:	4828      	ldr	r0, [pc, #160]	; (80016c0 <main+0x23c>)
 8001620:	f7ff f926 	bl	8000870 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 8001624:	4622      	mov	r2, r4
 8001626:	4639      	mov	r1, r7
 8001628:	4825      	ldr	r0, [pc, #148]	; (80016c0 <main+0x23c>)
 800162a:	f7ff f921 	bl	8000870 <HAL_GPIO_WritePin>
        spiTxBuf[0]=0x24;
 800162e:	2324      	movs	r3, #36	; 0x24
 8001630:	7033      	strb	r3, [r6, #0]
          spiTxBuf[1]=0x10;
 8001632:	2310      	movs	r3, #16
 8001634:	7073      	strb	r3, [r6, #1]
	  HAL_SPI_Transmit(&hspi5,spiTxBuf,2,50);
 8001636:	463a      	mov	r2, r7
 8001638:	2332      	movs	r3, #50	; 0x32
 800163a:	4631      	mov	r1, r6
 800163c:	4628      	mov	r0, r5
 800163e:	f7ff fca6 	bl	8000f8e <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001642:	4642      	mov	r2, r8
 8001644:	4639      	mov	r1, r7
 8001646:	481e      	ldr	r0, [pc, #120]	; (80016c0 <main+0x23c>)
 8001648:	f7ff f912 	bl	8000870 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800164c:	4622      	mov	r2, r4
 800164e:	4639      	mov	r1, r7
 8001650:	481b      	ldr	r0, [pc, #108]	; (80016c0 <main+0x23c>)
 8001652:	f7ff f90d 	bl	8000870 <HAL_GPIO_WritePin>
  spiTxBuf[0]=0x20|0x80;
 8001656:	23a0      	movs	r3, #160	; 0xa0
 8001658:	7033      	strb	r3, [r6, #0]
  HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 800165a:	4642      	mov	r2, r8
 800165c:	2332      	movs	r3, #50	; 0x32
 800165e:	4631      	mov	r1, r6
 8001660:	4628      	mov	r0, r5
 8001662:	f7ff fc94 	bl	8000f8e <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi5,spiRxBuf,1,50);
 8001666:	2332      	movs	r3, #50	; 0x32
 8001668:	4642      	mov	r2, r8
 800166a:	491c      	ldr	r1, [pc, #112]	; (80016dc <main+0x258>)
 800166c:	4628      	mov	r0, r5
 800166e:	f7ff fe26 	bl	80012be <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 8001672:	4642      	mov	r2, r8
 8001674:	4639      	mov	r1, r7
 8001676:	4812      	ldr	r0, [pc, #72]	; (80016c0 <main+0x23c>)
 8001678:	f7ff f8fa 	bl	8000870 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_RESET);
 800167c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8001680:	f504 3402 	add.w	r4, r4, #133120	; 0x20800
 8001684:	4620      	mov	r0, r4
 8001686:	2200      	movs	r2, #0
 8001688:	2102      	movs	r1, #2
 800168a:	f7ff f8f1 	bl	8000870 <HAL_GPIO_WritePin>
	  spiTxBuf[0]=0x29|0x80;
 800168e:	23a9      	movs	r3, #169	; 0xa9
 8001690:	7033      	strb	r3, [r6, #0]
	  HAL_SPI_Transmit(&hspi5,spiTxBuf,1,50);
 8001692:	2201      	movs	r2, #1
 8001694:	2332      	movs	r3, #50	; 0x32
 8001696:	490c      	ldr	r1, [pc, #48]	; (80016c8 <main+0x244>)
 8001698:	4628      	mov	r0, r5
 800169a:	f7ff fc78 	bl	8000f8e <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi5,spiRxBuf,1,50);
 800169e:	2332      	movs	r3, #50	; 0x32
 80016a0:	2201      	movs	r2, #1
 80016a2:	490e      	ldr	r1, [pc, #56]	; (80016dc <main+0x258>)
 80016a4:	4628      	mov	r0, r5
 80016a6:	f7ff fe0a 	bl	80012be <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
 80016aa:	4620      	mov	r0, r4
 80016ac:	2201      	movs	r2, #1
 80016ae:	2102      	movs	r1, #2
 80016b0:	f7ff f8de 	bl	8000870 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80016b4:	20c8      	movs	r0, #200	; 0xc8
 80016b6:	f7fe ff71 	bl	800059c <HAL_Delay>
 80016ba:	e7e3      	b.n	8001684 <main+0x200>
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020800 	.word	0x40020800
 80016c4:	20000030 	.word	0x20000030
 80016c8:	20000088 	.word	0x20000088
 80016cc:	40020c00 	.word	0x40020c00
 80016d0:	10110000 	.word	0x10110000
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40015000 	.word	0x40015000
 80016dc:	2000002c 	.word	0x2000002c

080016e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <HAL_MspInit+0x34>)
 80016e4:	2100      	movs	r1, #0
 80016e6:	9100      	str	r1, [sp, #0]
 80016e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016ee:	645a      	str	r2, [r3, #68]	; 0x44
 80016f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016f2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80016f6:	9200      	str	r2, [sp, #0]
 80016f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	9101      	str	r1, [sp, #4]
 80016fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001702:	641a      	str	r2, [r3, #64]	; 0x40
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170e:	b002      	add	sp, #8
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001718:	b510      	push	{r4, lr}
 800171a:	4604      	mov	r4, r0
 800171c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	2214      	movs	r2, #20
 8001720:	2100      	movs	r1, #0
 8001722:	a803      	add	r0, sp, #12
 8001724:	f000 f898 	bl	8001858 <memset>
  if(hspi->Instance==SPI5)
 8001728:	6822      	ldr	r2, [r4, #0]
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <HAL_SPI_MspInit+0x64>)
 800172c:	429a      	cmp	r2, r3
 800172e:	d123      	bne.n	8001778 <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001730:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8001734:	2100      	movs	r1, #0
 8001736:	9101      	str	r1, [sp, #4]
 8001738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800173a:	4811      	ldr	r0, [pc, #68]	; (8001780 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 800173c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001740:	645a      	str	r2, [r3, #68]	; 0x44
 8001742:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001744:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001748:	9201      	str	r2, [sp, #4]
 800174a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800174c:	9102      	str	r1, [sp, #8]
 800174e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001750:	f042 0220 	orr.w	r2, r2, #32
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
 8001756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001760:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001764:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800176e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001770:	2305      	movs	r3, #5
 8001772:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001774:	f7fe ff90 	bl	8000698 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001778:	b008      	add	sp, #32
 800177a:	bd10      	pop	{r4, pc}
 800177c:	40015000 	.word	0x40015000
 8001780:	40021400 	.word	0x40021400

08001784 <NMI_Handler>:
 8001784:	4770      	bx	lr

08001786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001786:	e7fe      	b.n	8001786 <HardFault_Handler>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	e7fe      	b.n	8001788 <MemManage_Handler>

0800178a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178a:	e7fe      	b.n	800178a <BusFault_Handler>

0800178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler>

0800178e <SVC_Handler>:
 800178e:	4770      	bx	lr

08001790 <DebugMon_Handler>:
 8001790:	4770      	bx	lr

08001792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001792:	4770      	bx	lr

08001794 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001794:	f7fe bef0 	b.w	8000578 <HAL_IncTick>

08001798 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001798:	2002      	movs	r0, #2
 800179a:	f7ff b86f 	b.w	800087c <HAL_GPIO_EXTI_IRQHandler>
	...

080017a0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <SystemInit+0x18>)
 80017a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80017a6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80017aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80017bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017f4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80017c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80017c2:	e003      	b.n	80017cc <LoopCopyDataInit>

080017c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017ca:	3104      	adds	r1, #4

080017cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017cc:	480b      	ldr	r0, [pc, #44]	; (80017fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017d4:	d3f6      	bcc.n	80017c4 <CopyDataInit>
  ldr  r2, =_sbss
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017d8:	e002      	b.n	80017e0 <LoopFillZerobss>

080017da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017dc:	f842 3b04 	str.w	r3, [r2], #4

080017e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017e4:	d3f9      	bcc.n	80017da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017e6:	f7ff ffdb 	bl	80017a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017ea:	f000 f811 	bl	8001810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ee:	f7ff fe49 	bl	8001484 <main>
  bx  lr    
 80017f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017f4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80017f8:	080018a0 	.word	0x080018a0
  ldr  r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001800:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001804:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001808:	2000008c 	.word	0x2000008c

0800180c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800180c:	e7fe      	b.n	800180c <ADC_IRQHandler>
	...

08001810 <__libc_init_array>:
 8001810:	b570      	push	{r4, r5, r6, lr}
 8001812:	4e0d      	ldr	r6, [pc, #52]	; (8001848 <__libc_init_array+0x38>)
 8001814:	4c0d      	ldr	r4, [pc, #52]	; (800184c <__libc_init_array+0x3c>)
 8001816:	1ba4      	subs	r4, r4, r6
 8001818:	10a4      	asrs	r4, r4, #2
 800181a:	2500      	movs	r5, #0
 800181c:	42a5      	cmp	r5, r4
 800181e:	d109      	bne.n	8001834 <__libc_init_array+0x24>
 8001820:	4e0b      	ldr	r6, [pc, #44]	; (8001850 <__libc_init_array+0x40>)
 8001822:	4c0c      	ldr	r4, [pc, #48]	; (8001854 <__libc_init_array+0x44>)
 8001824:	f000 f820 	bl	8001868 <_init>
 8001828:	1ba4      	subs	r4, r4, r6
 800182a:	10a4      	asrs	r4, r4, #2
 800182c:	2500      	movs	r5, #0
 800182e:	42a5      	cmp	r5, r4
 8001830:	d105      	bne.n	800183e <__libc_init_array+0x2e>
 8001832:	bd70      	pop	{r4, r5, r6, pc}
 8001834:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001838:	4798      	blx	r3
 800183a:	3501      	adds	r5, #1
 800183c:	e7ee      	b.n	800181c <__libc_init_array+0xc>
 800183e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001842:	4798      	blx	r3
 8001844:	3501      	adds	r5, #1
 8001846:	e7f2      	b.n	800182e <__libc_init_array+0x1e>
 8001848:	08001898 	.word	0x08001898
 800184c:	08001898 	.word	0x08001898
 8001850:	08001898 	.word	0x08001898
 8001854:	0800189c 	.word	0x0800189c

08001858 <memset>:
 8001858:	4402      	add	r2, r0
 800185a:	4603      	mov	r3, r0
 800185c:	4293      	cmp	r3, r2
 800185e:	d100      	bne.n	8001862 <memset+0xa>
 8001860:	4770      	bx	lr
 8001862:	f803 1b01 	strb.w	r1, [r3], #1
 8001866:	e7f9      	b.n	800185c <memset+0x4>

08001868 <_init>:
 8001868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186a:	bf00      	nop
 800186c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800186e:	bc08      	pop	{r3}
 8001870:	469e      	mov	lr, r3
 8001872:	4770      	bx	lr

08001874 <_fini>:
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001876:	bf00      	nop
 8001878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800187a:	bc08      	pop	{r3}
 800187c:	469e      	mov	lr, r3
 800187e:	4770      	bx	lr
